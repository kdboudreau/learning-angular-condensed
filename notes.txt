-- typescript features:
export: (like before the word class) means it can be used in another file.
import: used in the other file to make it accessable within that file
class: how an instance (or object) should look. a class is a blueprint of an object
property: classes contain properties, like variables
methods: classes have methods; these have parenthesis and a funtion body with code to execute
types: indicates what the variable is, like string. format is "aNumber: number". typescript can still infer types
@: decorator. this is a function which can attach to other constructs (like a class). it will always refer to what comes right
    after it. it can also be added to properties

-- components
angular adjusts the dom after the page is loaded. the html files get parsed and created as js, then adjust the dom based on
    template when the time comes
selector: this defines a css selector by which angular will identify this element (can also use a class, thoguh not common)
templateUrl: defines what to render. this is what to render when the selector is found
styleUrls: defines all the styles that should be applied to the template using the selector
only the AppComponent will be searched for by the index.html because it was added to the bootstrap array in app.module.ts (the
    bootstrap is the angular app, adding another component will create another app)
    adding UserComponent (and all new components) in the declarations in app.module.ts to make angular aware that its part of the app

- string interpolation
use double curly braces only in templates controlled by angular (not index.html)

- event listening
in JS could add event listener "yourInput.addEventListener('eventName', 'function(that handles this'))"
in angular can add event listening by adding extra feature, syntax includes "(eventName)=function(that handles this)"
    event object passed into event handler automatically, angular automatically assigns name of $event this event object

 - property binding
bind to property by enclosing in brackets then assign value without braces "[value] = 'name'"
    here we bind to the value property of the input element object (instead of setting the attribute to some text)

- two way binding
effectively combines event listening and property binding. syntax "[(ngModel)]='name'". angular manages the binding in both directions
    can only do this on an element that has a value property it can bind to and will emit an ipnut event

directive: instructions you place in templates; components are directives (like replace with my template from component)
directive allows you to adjust parts of element it sits on

- binding component properties
can use a decorator on a property. ex. @Input() is an angular function
in html need to use both quotes around string, because in angular inside of double quotes is typescript code ex [name] "'Kat'"

-listening to custom events

- using cli for creating components
side note: .spec.ts files used for unit testing

- imported npm install --save @types/lodash to be able to use lodash javascript library in a way typescript would understand

Directives!
- directives are instructions placed in your template
- and example of a directive that's not a component is "ngFor".
- there are two types of directives: structural (aka changes the structure of the dom) and attribute
- a star in front of a directive indicates that its a structural dirctive
   - dont need brackets [] because the * tells angular that it needs to do more work in the background for us
   - ngFor uses typescript/es6 "for of" syntax
   - {{ }} is string interpolation to output the item
- ngModel is an example of an attribute directive
- ngClass is another attribute directive
* all directives that start with "ng" are shipped with angular (so no need to extra import)
- need to pass some data to a property in the directive, and for the ngClass directive the property name is also ngClass
   - so the directive is not [ngClass], this was written in a way where we can combine the directive and property
     into just [ngClass] (this is the case for all directives that have the same name as the property name)
   - alternative it would look like this, where the directive would sit on an element then we set the property
      ex. <div ngClass [ngClass]="valueBlah">
- another structural directive is ngIf. ngIf will attach or detach an element to the dom (not just make it visible or hidden)

Services!
- services are extra typescript classes we can create which can centralize some code (eliminating duplication)
- ex. logging data, storing user data
